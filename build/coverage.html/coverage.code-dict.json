{"/home/travis/build/npmtest/node-npmtest-geocoder/test.js":"/* istanbul instrument in package npmtest_geocoder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-geocoder/lib.npmtest_geocoder.js":"/* istanbul instrument in package npmtest_geocoder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_geocoder = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_geocoder = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-geocoder/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-geocoder && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_geocoder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_geocoder\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_geocoder.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_geocoder.rollup.js'] =\n            local.assetsDict['/assets.npmtest_geocoder.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_geocoder.__dirname + '/lib.npmtest_geocoder.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-geocoder/node_modules/geocoder/index.js":"/**\n * Geocoder\n */\n\n/**\n * Module Dependencies\n */\n\n/**\n * Version\n */\n\nvar version = '0.2.3';\n\n\n/**\n * Geocoder\n */\n\nfunction Geocoder () {\n  this.selectProvider(\"google\");\n};\n\n/**\n * Geocoder prototype\n */\n\nGeocoder.prototype = {\n\n\n  /**\n   * Selects a webservice provider\n   *\n   * @param {String} name, required\n   * @param {Object} opts, optional\n   * @api public\n   */\n\n  selectProvider: function ( name, opts ) {\n\n    if ( ! name ) {\n      return cbk( new Error( \"Geocoder.selectProvider requires a name.\") );\n    }\n\n    this.provider = name;\n    this.providerOpts = opts || {};\n    this.providerObj = require(\"./providers/\"+name);\n\n  },\n\n  /**\n   * Request geocoordinates of given `loc` from Google\n   *\n   * @param {String} loc, required\n   * @param {Function} cbk, required\n   * @param {Object} opts, optional\n   * @api public\n   */\n\n  geocode: function ( loc, cbk, opts ) {\n\n    if ( ! loc ) {\n        return cbk( new Error( \"Geocoder.geocode requires a location.\") );\n    }\n\n    return this.providerObj.geocode(this.providerOpts, loc, cbk, opts);\n\n  },\n\n  reverseGeocode: function ( lat, lng, cbk, opts ) {\n    if ( !lat || !lng ) {\n      return cbk( new Error( \"Geocoder.reverseGeocode requires a latitude and longitude.\" ) );\n    }\n\n    return this.providerObj.reverseGeocode(this.providerOpts, lat, lng, cbk, opts );\n\n  },\n\n  /**\n   * Return Geocoder version\n   *\n   * @api public\n   */\n\n  version: version\n\n};\n\n/**\n * Export\n */\n\nmodule.exports = new Geocoder();\n","/home/travis/build/npmtest/node-npmtest-geocoder/node_modules/geocoder/providers/google.js":"var request = require(\"request\");\nvar _ = require('underscore');\n\nexports.geocode = function ( providerOpts, loc, cbk, opts ) {\n\n  var options = _.extend({sensor: false, address: loc}, opts || {});\n  var uri = \"http\" + ( options.key ? \"s\" : \"\" ) + \"://maps.googleapis.com/maps/api/geocode/json\"\n  request({\n    uri: uri,\n    qs:options\n  }, function(err,resp,body) {\n    if (err) return cbk(err);\n    var result;\n    try {\n      result = JSON.parse(body);\n    } catch (err) {\n      cbk(err);\n      return;\n    }\n    cbk(null,result);\n  });\n};\n\nexports.reverseGeocode = function ( providerOpts, lat, lng, cbk, opts ) {\n\n  var options = _.extend({sensor: false, latlng: lat + ',' + lng}, opts || {});\n  var uri = \"http\" + ( options.key ? \"s\" : \"\" ) + \"://maps.googleapis.com/maps/api/geocode/json\"\n\n  request({\n    uri:uri,\n    qs:options\n  }, function(err,resp,body) {\n    if (err) return cbk(err);\n    var result;\n    try {\n      result = JSON.parse(body);\n    } catch (err) {\n      cbk(err);\n      return;\n    }\n    cbk(null,result);\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-geocoder/node_modules/geocoder/providers/geonames.js":"\n// xml2js is optional because only needed for geonames support\nvar xml2js = require(\"xml2js\");\nvar request = require(\"request\");\nvar _ = require('underscore');\n\nexports.geocode = function ( providerOpts, loc, cbk, opts ) {\n\n  var options = _.extend({q: loc, maxRows: 10, username:providerOpts.username||\"demo\" }, opts || {});\n\n  request({\n    uri:\"http://api.geonames.org/searchJSON\",\n    qs:options\n  }, function(err,resp,body) {\n    if (err) return cbk(err);\n    var result;\n    try {\n      result = JSON.parse(body);\n    } catch (err) {\n      cbk(err);\n      return;\n    }\n    cbk(null,result);\n  });\n};\n\nexports.reverseGeocode = function ( providerOpts, lat, lng, cbk, opts ) {\n\n  var options = _.extend({lat:lat, lng:lng, username:providerOpts.username||\"demo\" }, opts || {});\n\n  request({\n    uri:\"http://api.geonames.org/extendedFindNearby\",\n    qs:options\n  }, function(err,resp,body) {\n    if (err) return cbk(err);\n\n    var parser = new xml2js.Parser();\n    parser.parseString(body, function (err, result) {\n      if (err) return cbk(err); \n\n      // Transform geonames' structure into something that looks like Google's JSON outpu\n      // https://developers.google.com/maps/documentation/geocoding/#JSON\n      var googlejson = {\n        \"status\":\"OK\",\n        \"results\":[\n          {\n            \"address_components\":[],\n            \"formatted_address\":\"\",\n            \"geometry\":{\n              \"location\":{\n                \"lat\":lat,\n                \"lng\":lng\n              }\n            }\n          }\n        ]\n      };\n\n      if (result.geonames.address) {\n        var a = result.geonames.address[0];\n\n        if (a.streetNumber && typeof a.streetNumber[0]==\"string\")\n          googlejson.results[0].address_components.push({\n            \"long_name\":a.streetNumber[0],\n            \"short_name\":a.streetNumber[0],\n            \"types\":[\"street_number\"]\n          });\n\n        if (a.street && typeof a.street[0]==\"string\")\n          googlejson.results[0].address_components.push({\n            \"long_name\":a.street[0],\n            \"short_name\":a.street[0],\n            \"types\":[\"route\"]\n          });\n\n        if (a.placename && typeof a.placename[0]==\"string\")\n          googlejson.results[0].address_components.push({\n            \"long_name\":a.placename[0],\n            \"short_name\":a.placename[0],\n            \"types\":[\"locality\", \"political\"]\n          });\n\n        if (a.adminName1 && typeof a.adminName1[0]==\"string\")\n          googlejson.results[0].address_components.push({\n            \"long_name\":a.adminName1[0],\n            \"short_name\":a.adminCode1[0],\n            \"types\":[ \"administrative_area_level_1\", \"political\" ]\n          });\n\n        if (a.adminName2 && typeof a.adminName2[0]==\"string\")\n          googlejson.results[0].address_components.push({\n            \"long_name\":a.adminName2[0],\n            \"short_name\":a.adminCode2[0],\n            \"types\":[ \"administrative_area_level_2\", \"political\" ]\n          });\n\n        if (a.countryCode && typeof a.countryCode[0]==\"string\")\n          googlejson.results[0].address_components.push({\n            \"long_name\":a.countryCode[0]==\"US\"?\"United States\":\"\",\n            \"short_name\":a.countryCode[0],\n            \"types\":[ \"country\" ]\n          });\n\n        if (a.lat && typeof a.lat[0]==\"string\")\n          googlejson.results[0].geometry.location = {\n            \"lat\":parseFloat(a.lat[0]),\n            \"lng\":parseFloat(a.lng[0])\n          }\n      }\n\n      if (result.geonames.geoname) {\n        // http://www.geonames.org/export/codes.html\n        // https://developers.google.com/maps/documentation/geocoding/#Types\n        var fcode2google = {\n          \"ADM1\":[ \"administrative_area_level_1\", \"political\" ],\n          \"ADM2\":[ \"administrative_area_level_2\", \"political\" ],\n          \"ADM3\":[ \"administrative_area_level_3\", \"political\" ],\n          \"ADMD\":[ \"political\"],\n          \"PPL\" :[ \"locality\"]\n        };\n\n        result.geonames.geoname.forEach(function(geoname) {\n\n          // Push only recognized types to results\n          if (geoname.fcode[0]==\"PCLI\") {\n            googlejson.results[0].address_components.push({\n              \"long_name\":geoname.name[0],\n              \"short_name\":geoname.countryCode[0],\n              \"types\":[ \"country\", \"political\"]\n            });\n          \n          } else if (fcode2google[geoname.fcode[0]]) {\n\n\n            googlejson.results[0].address_components.push({\n              \"long_name\":geoname.toponymName[0],\n              \"short_name\":geoname.name[0],\n              \"types\":fcode2google[geoname.fcode[0]]\n            });\n          }\n\n        });\n      }\n\n      // Make a formatted address as well as we can\n      var shortNames = {};\n      googlejson.results[0].address_components.forEach(function(c) {\n        if (c.types[0]==\"country\") return shortNames.country = c.long_name || c.short_name;\n        shortNames[c.types[0]] = c.short_name;\n      });\n\n      var formatted = [];\n      if (shortNames.street_number || shortNames.route) {\n        formatted.push((shortNames.street_number?shortNames.street_number+\" \":\"\")+shortNames.route);\n      }\n      if (shortNames.locality) {\n        formatted.push(shortNames.locality);\n      }\n      if (shortNames.administrative_area_level_1) {\n        formatted.push(shortNames.administrative_area_level_1);\n      }\n      if (shortNames.country) {\n        formatted.push(shortNames.country);\n      }\n\n      googlejson.results[0].formatted_address = formatted.join(\", \");\n\n      cbk(null, googlejson);\n    });\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-geocoder/node_modules/geocoder/providers/yahoo.js":"// xml2js is optional because only needed for geonames support\nvar xml2js = require(\"xml2js\");\nvar request = require(\"request\");\nvar _ = require('underscore');\n\nexports.geocode = function ( providerOpts, loc, cbk, opts ) {\n\n  var options = _.extend({q: loc, flags: \"J\", appid:providerOpts.appid||\"[yourappidhere]\" }, opts || {});\n\n  request({\n    uri:\"http://where.yahooapis.com/geocode\",\n    qs:options\n  }, function(err,resp,body) {\n    if (err) return cbk(err);\n    var result;\n    try {\n      result = JSON.parse(body);\n    } catch (err) {\n      cbk(err);\n      return;\n    }\n    cbk(null,result);\n  });\n};\n\n// yahoo placefinder api http://developer.yahoo.com/geo/placefinder/guide/\nexports.reverseGeocode = function ( providerOpts, lat, lng, cbk, opts ) {\n\n  var options = _.extend({q: lat+\", \"+lng, gflags:\"R\", flags: \"J\", appid:providerOpts.appid||\"[yourappidhere]\" }, opts || {});\n\n  request({\n    uri:\"http://where.yahooapis.com/geocode\",\n    qs:options\n  }, function(err,resp,body) {\n\n    // console.log(\"[GEOCODER Yahoo API] uri:\", \"http://where.yahooapis.com/geocode\");\n    // console.log(\"[GEOCODER Yahoo API] options:\", JSON.stringify(options));\n    // console.log(\"[GEOCODER Yahoo API] body:\", body);\n\n    if (err) return cbk(err);\n\n    var result;\n    try {\n      result = JSON.parse(body);\n    } catch (err) {\n      cbk(err);\n      return;\n    }\n\n    // Transform yahoo' structure into something that looks like Google's JSON outpu\n    // https://developers.google.com/maps/documentation/geocoding/#JSON\n    var googlejson = {\n      \"status\":\"OK\",\n      \"results\":[\n        {\n          \"address_components\":[],\n          \"formatted_address\":\"\",\n          \"geometry\":{\n            \"location\":{\n              \"lat\":lat,\n              \"lng\":lng\n            }\n          }\n        }\n      ]\n    };\n\n    if (result.ResultSet.Error !== \"0\" && result.ResultSet.Error !== 0) {\n      console.log(\"[GEOCODER Yahoo API] ERROR\", result.Error, result.ErrorMessage);\n      return cbk(result.ResultSet.ErrorMessage);\n    }\n\n    var a = null;\n    // Yahoo seems to change its response format \"randomly\". So, sometimes, it there is only one result,\n    // it will be in ResultSet.Result, and sometimes, in ResultSet.Results[0]\n    if (undefined !== result.ResultSet.Result) {\n      a = result.ResultSet.Result;\n    }\n    else if (result.ResultSet.Results && result.ResultSet.Results.length) {\n      a = result.ResultSet.Results[0];\n    }\n\n    if (!a) {\n      return cbk(\"Error getting results from Yahoo API\");\n    }\n\n    if (a.house)\n      googlejson.results[0].address_components.push({\n        \"long_name\":a.house,\n        \"short_name\":a.house,\n        \"types\":[\"street_number\"]\n      });\n\n    if (a.street)\n      googlejson.results[0].address_components.push({\n        \"long_name\":a.street,\n        \"short_name\":a.street,\n        \"types\":[\"route\"]\n      });\n\n    if (a.city)\n      googlejson.results[0].address_components.push({\n        \"long_name\":a.city,\n        \"short_name\":a.city,\n        \"types\":[\"locality\", \"political\"]\n      });\n\n    if (a.state)\n      googlejson.results[0].address_components.push({\n        \"long_name\":a.state,\n        \"short_name\":a.statecode || a.state,\n        \"types\":[ \"administrative_area_level_1\", \"political\" ]\n      });\n\n    if (a.county)\n      googlejson.results[0].address_components.push({\n        \"long_name\":a.county,\n        \"short_name\":a.countycode || a.county,\n        \"types\":[ \"administrative_area_level_2\", \"political\" ]\n      });\n\n    if (a.country)\n      googlejson.results[0].address_components.push({\n        \"long_name\":a.country,\n        \"short_name\":a.countrycode,\n        \"types\":[ \"country\" ]\n      });\n\n    if (a.postal)\n      googlejson.results[0].address_components.push({\n        \"long_name\":a.postal,\n        \"short_name\":a.postal,\n        \"types\":[ \"postal_code\" ]\n      });\n\n    if (a.latitude)\n      googlejson.results[0].geometry.location = {\n        \"lat\":parseFloat(a.latitude),\n        \"lng\":parseFloat(a.longitude)\n      };\n\n    // Make a formatted address as well as we can\n    var formatted = [];\n    if (a.line1) formatted.push(a.line1);\n    if (a.line2) formatted.push(a.line2);\n    if (a.line3) formatted.push(a.line3);\n    if (a.line4) formatted.push(a.line4);\n\n    googlejson.results[0].formatted_address = formatted.join(\", \");\n\n    // console.log(\"[GEOCODER Yahoo API], calling callback w/\", JSON.stringify(googlejson));\n\n    cbk(null, googlejson);\n  });\n\n};\n"}